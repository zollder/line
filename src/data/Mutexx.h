#include <pthread.h>
#include <stdio.h>

#ifndef mutexx_h
#define mutexx_h

//-----------------------------------------------------------------------------------------
// Mutexx class definition and implementation.
// Works as a wrapper around standard pthread_mutex functions.
//-----------------------------------------------------------------------------------------
class Mutexx
{
	//-----------------------------------------------------------------------------------------
	// Public members
	//-----------------------------------------------------------------------------------------
	public:
		//-----------------------------------------------------------------------------------------
		// Constructor (initializes mutex)
		//-----------------------------------------------------------------------------------------
		Mutexx()
		{
			printf("Initializing mutex ...\n");
			pthread_mutex_init(&mutex, NULL);
		}

		//-----------------------------------------------------------------------------------------
		// Destructor
		//-----------------------------------------------------------------------------------------
		virtual ~Mutexx()
		{
			printf("\nDestroying mutex ...\n");
			int status = pthread_mutex_destroy(&mutex);
			if (status != 0)
				printf("Error destroying mutex\n");
		}

		//-----------------------------------------------------------------------------------------
		// Locks mutex, returns 0 (success) or error code (failure).
		//-----------------------------------------------------------------------------------------
		int lock()
		{
			return pthread_mutex_lock(&mutex);
		}

		//-----------------------------------------------------------------------------------------
		// Unlocks mutex, returns 0 (success) or error code (failure).
		//-----------------------------------------------------------------------------------------
		int unlock()
		{
			return pthread_mutex_unlock(&mutex);
		}

		//-----------------------------------------------------------------------------------------
		// Tries to lock mutex, returns 0 (success) or error code (failure).
		//-----------------------------------------------------------------------------------------
		int trylock()
		{
			return pthread_mutex_lock(&mutex);
		}

	//-----------------------------------------------------------------------------------------
	// Private members
	//-----------------------------------------------------------------------------------------
	private:
		pthread_mutex_t  mutex;
};

#endif
